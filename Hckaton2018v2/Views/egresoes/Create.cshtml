@model Hckaton2018v2.egreso


@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<style>
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #map {
        width: 100%;
        height: 80%;
    }

    #coords {
        width: 500px;
    }
</style>


<section class="wellcome_area clearfix" id="home">
    <div class="container h-100">
        <div class="row h-100 align-items-center">
            <div class="col-12 col-md">

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <div class="page-header text-center">
                            <h1 style="color:#f3f3ff">Egreso</h1>
                        </div>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.idPresupuesto, "Presupuesto", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.DropDownList("idPresupuesto", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.idPresupuesto, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.idArchivo, "Archivo", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.DropDownList("idArchivo", null, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.idArchivo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.cantidad,"Cantidad", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.cantidad, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.cantidad, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.descripcion,"Descripción", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.descripcion, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.descripcion, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.votosPositivos,"Votos positivos", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.votosPositivos, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.votosPositivos, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.votosNegativos,"Votos negativos", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.votosNegativos, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.votosNegativos, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group" >

                            <input type="button"   value="Abrir mapa" id="btnAccion"/> 


                            <div id="map" ></div>

                            <input type="text" id="coords" />
                           
                            
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.latitud ,"Latitud", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.latitud, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.latitud, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.longitud,"Longitud", htmlAttributes: new { @class = "control-label col-md-2 text-capitalize font-weight-bold" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.longitud, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.longitud, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Crear" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                }

                <div class="h5">
                    @Html.ActionLink("Regresar", "Index")
                </div>
            </div>
        </div>
    </div>


  




</section>

<script >

    //$('#map').hide(); //muestro mediante id


        $(document).ready(function () {
            $("#btnAccion").on("click", function () {

                $('#map').show(); //muestro mediante id

            });

        });



 var marker;          //variable del marcador
var coords = {};    //coordenadas obtenidas con la geolocalizaci�n

//Funcion principal
initMap = function ()
{

    //usamos la API para geolocalizar el usuario
        navigator.geolocation.getCurrentPosition(
          function (position){
            coords =  {
              lng: position.coords.longitude,
              lat: position.coords.latitude
            };
            setMapa(coords);  //pasamos las coordenadas al metodo para crear el mapa


          },function(error){console.log(error);});

}



function setMapa (coords)
{
      //Se crea una nueva instancia del objeto mapa
      var map = new google.maps.Map(document.getElementById('map'),
      {
        zoom: 13,
        center:new google.maps.LatLng(coords.lat,coords.lng),

      });

      //Creamos el marcador en el mapa con sus propiedades
      //para nuestro obetivo tenemos que poner el atributo draggable en true
      //position pondremos las mismas coordenas que obtuvimos en la geolocalizaci�n
      marker = new google.maps.Marker({
        map: map,
        draggable: true,
        animation: google.maps.Animation.DROP,
        position: new google.maps.LatLng(coords.lat,coords.lng),

      });
      //agregamos un evento al marcador junto con la funcion callback al igual que el evento dragend que indica
      //cuando el usuario a soltado el marcador
      marker.addListener('click', toggleBounce);

      marker.addListener( 'dragend', function (event)
      {
        //escribimos las coordenadas de la posicion actual del marcador dentro del input #coords
        document.getElementById("coords").value = this.getPosition().lat()+","+ this.getPosition().lng();
      });
}

//callback al hacer clic en el marcador lo que hace es quitar y poner la animacion BOUNCE
function toggleBounce() {
  if (marker.getAnimation() !== null) {
    marker.setAnimation(null);
  } else {
    marker.setAnimation(google.maps.Animation.BOUNCE);
  }
}

// Carga de la libreria de google maps

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDWGMp-sPCJDnju6NjyPYufMN70UUBr9sI&callback=initMap"></script>



